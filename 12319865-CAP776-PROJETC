import csv
import re
import hashlib
import requests
from datetime import datetime
import os

REGNO_FILE_PATH = 'regno.csv'
USER_ACTIVITY_LOG_PATH = 'user_activity_log.csv'

def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def validate_password(password):
    if len(password) < 8:
        return False
    special_characters = re.compile('[@$!%*?&]')
    return bool(special_characters.search(password))

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def signup(email, password, security_question, correct_answer):
    hashed_password = hash_password(password)
    with open(REGNO_FILE_PATH, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([email, hashed_password, security_question, correct_answer])
    print("Signup successful! Now logging in...")
    login(email)

def login(email=None):
    login_attempts = 0
    if not email:
        email = input("Enter your email: ")

    if not validate_email(email):
        print("Invalid email format.")
        return

    while login_attempts < 5:
        password = input("Enter your password: ")
        hashed_password = hash_password(password)
        try:
            with open(REGNO_FILE_PATH, mode='r') as file:
                reader = csv.reader(file)
                for row in reader:
                    if row[0] == email and row[1] == hashed_password:
                        print("Login successful!")
                        use_geolocation(email)
                        return
            print("Invalid email or password.")
        except FileNotFoundError:
            print("User database not found.")
            return
        login_attempts += 1
        print(f"Attempt {login_attempts} of 5.")

    if login_attempts >= 3:
        reset_choice = input("Too many failed attempts. Would you like to reset your password? (yes/no): ")
        if reset_choice.lower() == 'yes':
            reset_password(email)

def reset_password(email):
    try:
        with open(REGNO_FILE_PATH, mode='r') as file:
            reader = csv.reader(file)
            for row in reader:
                if row[0] == email:
                    security_question = row[2]
                    correct_answer = row[3]
                    answer = input(f"Security Question: {security_question}\nYour Answer: ")
                    if answer == correct_answer:
                        new_password = input("Enter your new password: ")
                        if validate_password(new_password):
                            hashed_password = hash_password(new_password)
                            update_password(email, hashed_password)
                            print("Password reset successful! Now logging in...")
                            login(email)
                        else:
                            print("New password does not meet criteria.")
                    else:
                        print("Incorrect answer to the security question.")
                    return
        print("Email not found.")
    except FileNotFoundError:
        print("User database not found.")

def update_password(email, new_password):
    rows = []
    with open(REGNO_FILE_PATH, mode='r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == email:
                row[1] = new_password
            rows.append(row)

    with open(REGNO_FILE_PATH, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(rows)
    print("Password updated successfully.")

def use_geolocation(email):
    ip_choice = input("Enter an IP address (or type 'my' to use your own IP): ")
    if ip_choice.lower() == 'my':
        ip_choice = requests.get('https://api64.ipify.org?format=json').json()['ip']

    url = f"http://ip-api.com/json/{ip_choice}"
    response = requests.get(url)

    data = response.json()

    if data['status'] == 'success':
        print("Geolocation Data:")
        country = data['country']
        city = data['city']
        region = data['regionName']
        latitude = data['lat']
        longitude = data['lon']
        timezone = data['timezone']
        isp = data['isp']

        print(f"Country: {country}")
        print(f"City: {city}")
        print(f"Region: {region}")
        print(f"Latitude: {latitude}")
        print(f"Longitude: {longitude}")
        print(f"Timezone: {timezone}")
        print(f"ISP: {isp}")

        log_activity(email, ip_choice, country, city, region, latitude, longitude, timezone, isp)
    else:
        print("Error retrieving data.")

def log_activity(email, ip, country, city, region, latitude, longitude, timezone, isp):
    now = datetime.now()
    date_str = now.strftime("%Y-%m-%d")
    time_str = now.strftime("%H:%M:%S")

    with open(USER_ACTIVITY_LOG_PATH, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([date_str, time_str, email, ip, country, city, region,
                         latitude, longitude, timezone, isp])

def main_menu():
    print("------------------------------Welcome to the Geolation Locator-------------------------")
    print("Please select an option:")
    print("1. Login")
    print("2. Sign Up")
    print("3. Reset Password")
    print("4. Exit")

def main():
    while True:
        main_menu()
        choice = input("Enter your choice (1-4): ")

        if choice == '1':
            email = input("Enter your email: ")
            login(email)

        elif choice == '2':
            email = input("Enter your email: ")
            if not validate_email(email):
                print("Invalid email format.")
                continue

            password = input("Enter your password: ")
            security_question = input("Enter your security question: ")
            correct_answer = input("Enter the answer to the security question: ")

            if validate_password(password):
                signup(email, password, security_question, correct_answer)
            else:
                print("Invalid password format.")

        elif choice == '3':
            email = input("Enter your email: ")
            reset_password(email)

        elif choice == '4':
            print("Thank you for using the application. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if _name_ == "_main_":
    main()
